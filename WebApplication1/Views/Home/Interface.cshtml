@model WebApplication1.Models.StartGameModel
@{

}
@section scripts {
	<!--Reference the SignalR library. -->
	<script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
	<!--Reference the autogenerated SignalR hub script. -->
	<script src="~/signalr/hubs"></script>
	<script>
		var _pid = '@(Model.PlayerId)';
		var _gameId = '@Model.GameId';

		function getPlayerList() {
			$.ajax({
				url: '@Url.Action("GetPlayerList", "Home")',
				data: { gameId: _gameId },
				cache: false,
				type: "GET",
				dataType: "html",
				success: function (data, textStatus, XMLHttpRequest) {
					$(".player-list").html(data);
				},
				failure: function (data, textStatus, XMLHttpRequest) {
					console.log(data);
				}
			});
		}

		function getDebug(pid) {
			$.ajax({
				url: '@Url.Action("GetDebug", "Home")',
				data: { gameId: _gameId, playerId: pid },
				cache: false,
				type: "GET",
				dataType: "html",
				success: function (data, textStatus, XMLHttpRequest) {
					$(".debug").html(data);
				},
				failure: function (data, textStatus, XMLHttpRequest) {
					console.log(data);
				}
			});
		}

		function getActions() {
			$.ajax({
				url: '@Url.Action("GetActions", "Home")',
				data: { pid: _pid, gameId: _gameId },
				cache: false,
				type: "POST",
				dataType: "html",
				success: function (data, textStatus, XMLHttpRequest) {
					$(".actions").html(data);
				},
				failure: function (data, textStatus, XMLHttpRequest) {
					console.log(data);
				}
			});
		}

		function debug(xhr, data) {
			if (data != "success") {
				console.log(data);
				alert(data.responseMessage);
			}
		}

		function clearForm() {
			$(".actions").html('');
		}

		function hideComms() {
			$(".comms-form").attr("style","visibility:hidden");
		}
		function showComms() {
			$(".comms-form").attr("style", "visibility:visible");
		}

		function setStatus(msg) {
			$("#status").html(msg);
		}

		function scrollBottom(el) {
			el.stop();
			el.animate({ scrollTop: el.prop("scrollHeight") - el.height() }, 1000);
		}


		$(function () {

			@if (Model.DebugAllowed)
			{
			<text>
			$("body").on("click", ".player-debug", function () {
				var pid = $(this).attr("data-pid");
				getDebug(pid);
			});
			</text>
			}

			// Reference the auto-generated proxy for the hub.
			var hub = $.connection.stakeHub;
			// Create a function that the hub can call back to display messages.
			hub.client.addNewMessageToPage = function (name, message, colour) {
				// Add the message to the page.
				$('#discussion').append('<li><strong style="color:' + colour + '">' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');

				scrollBottom($("#discussion"));
			};

			hub.client.announce = function (html) {
				// Add the message to the page.
				$('#discussion').append('<li>' + html + '</li>');

				scrollBottom($("#discussion"));
			};

			hub.client.privateMessage = function (message) {
				// Add the message to the page.
				$('#private').append('<li>' + message + '</li>');
				scrollBottom($("#private"));
			};

			hub.client.showPlayerStatus = function (html) {
				// Add the message to the page.
				$('.player-status').html(html);
			};



			hub.client.gameStarted = function () {
				$("#status").html('');
			}

			hub.client.startNight = function (turn) {
				$("body").addClass("sun");
				setTimeout(function () { $("body").addClass("dusk"); }, 2000);
				setTimeout(function () { $("body").addClass("night"); }, 2000);
				setStatus("It is night time (day " + turn + ")");
				getPlayerList();
				getActions();
			};

			hub.client.startDay = function (turn) {
				$(".actions-entered").html('');
				$("body").removeClass("night");
				setTimeout(function () { $("body").removeClass("dusk"); }, 2000);
				setTimeout(function () { $("body").removeClass("sun"); }, 4000);
				setStatus("It is the morning of day " + turn);
				getPlayerList();
				getActions();
			};


			hub.client.displayWaitingOn = function (html) {
				$(".waiting").html(html);
			};


			hub.client.displayActionsEntered = function (html) {
				$(".actions-entered").html(html);
			};

			$.connection.hub.start().done(function () {
				console.log('connected');
				hub.server.linkConnectionToPlayer(_gameId, _pid).then(function () {
					$("#connecting").hide();
					$("#status").show(300);
					
					console.log('linked');
					$.connection.stakeHub.server.checkForRefresh(_gameId);
				});

				$('#message').keypress(function (ev) {
					if (ev.which === 13) {
						$('#sendmessage').click();
					}
				});

				$('#sendmessage').click(function () {
					// Call the Send method on the hub.
					hub.server.send(_gameId, _pid, $('#message').val());
					// Clear text box and reset focus for next comment.
					$('#message').val('').focus();
				});
				$(".start-button").click(function () {
					hub.server.start(_gameId);
				});
				$(".ai-button").click(function () {
					hub.server.addAI(_gameId);
				});

			});

			$("#selFontSize").change(function () {
				var val = $("#selFontSize").val();
				$("body").removeClass("small");
				$("body").removeClass("medium");
				$("body").removeClass("large");
				$("body").addClass(val);
			});

			$("#chbShowHelp").change(function () {

				if ($("#chbShowHelp:checked").length > 0) {
					$("body").addClass("show-help");
				}
				else {
					$("body").removeClass("show-help");
				}
			});

			$("body").on("change checked", ".night-rdb-wrapper input", null, function () {

				if ($(".sleep-wrapper input:checked").length > 0) {
					console.log('disable');
					$(".night-whom-wrapper select").attr("disabled", "disabled");
					$(".night-whom-wrapper select").hide(100);
				}
				else {
					console.log('enable');
					$(".night-whom-wrapper select").removeAttr("disabled");
					$(".night-whom-wrapper select").show(100);
				}
			});


			$("body").on("change", ".comms-type-wrapper select", null, function () {

				if ($(".comms-type-wrapper select").val() == '2') { // slept
					$(".comms-whom-wrapper select").attr("disabled", "disabled");
					$(".comms-whom-wrapper select").hide(100);
				}
				else {
					$(".comms-whom-wrapper select").removeAttr("disabled");
					$(".comms-whom-wrapper select").show(100);
				}

				if ($(".comms-type-wrapper select").val() != '4') { // went out
					$(".comms-where-wrapper select").attr("disabled", "disabled");
					$(".comms-where-wrapper").hide(100);
				}
				else {
					$(".comms-where-wrapper select").removeAttr("disabled");
					$(".comms-where-wrapper").show(100);
				}
			});

		});
		// This optional function html-encodes messages for display in the page.
		function htmlEncode(value) {
			var encodedValue = $('<div />').text(value).html();
			return encodedValue;
		}
	</script>
}

<div class="row">
	<div class="col-sm-12">
		<div class="alert-info alert">
			<h4 id="connecting">Connecting...</h4>
			<div class="player-status pull-right"></div>
			<h4 id="status" style="display:none">
				Waiting for players
				<br /><br />
				<div class="btn-group">
					<input class="btn btn-info ai-button" value="Add 1 bot player" />
					<input class="btn btn-primary start-button" value="Start game" />
				</div>
			</h4>
			
		</div>
	</div>
	<div class="col-sm-6 form-horizontal">

		<p class="waiting" style="margin-top:15px">
		</p>

		<fieldset>
			<legend id="actions-entered-title">The day's votes</legend>
			<div class="actions-entered">
			</div>
		</fieldset>

		<div class="send-msg">
			<input type="text" id="message" class="form-control pull-left" />

			<input type="button" class="btn btn-primary pull-left" id="sendmessage" value="Send" />
			<div class="clearfix"></div>
		</div>

		<div class="form-group">

			<div class="col-xs-12">
				<ul id="discussion" class="msgbox"></ul>
			</div>
		</div>
	</div>
	<div class="col-sm-6">
		<ul id="private" class="msgbox"></ul>
		<fieldset>
			<legend>Your actions</legend>
			<div class="actions">

			</div>
		</fieldset>
		<fieldset>
			<legend>Player statuses</legend>
			<div class="player-list">

			</div>
		</fieldset>
	</div>

</div>
<div class="debug">

</div>
<hr />
<label class="control-label">
	<input type="checkbox" checked="checked" id="chbShowHelp" class="checkbox-inline" />
	Show help
</label>
<br />
<label class="control-label">
	Font size
	<select class="select" id="selFontSize">
		<option>small</option>
		<option>medium</option>
		<option selected="selected">large</option>
	</select>
</label>
